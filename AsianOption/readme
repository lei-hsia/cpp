Asian Option pricing via a Monte Carlo method:

including peripheral topics such as:
1. class PayOff: 为什么总是定义成abstract base class? 因为有很多中不同的PayOff. 
                  为什么要定义成functor？ 因为最后如果只需要返回一个value, 那么定义为object, 
                  只需要call object, 比调用function好用
                  定义为functor: public在写完constructor之后overload operator()
                  
2. class AsianOption: 也是定义为abstract base class(>= 1 virtual function, 
    因为AsianOption有很多种: arithmetic, geometric, continuous, discrete,所以也用inheritance
    
3. destructor: virtual: 这样在code execution-time的时候，correct destructor会被looked up 
    in an object known as vtable. Hence the destructor associated with Derived
	  will be called prior to a further call to the destructor associated
	  with Base. This is the behavior we originally desired. val will be
	  correctly deallocated. No memory leak this time.
   
  
一共4个class: 
1. PayOff: payoff.h payoff.cpp:  inheritance, abstract base class && Pure virtual function
2. Path Generation
3. class AsianOption
4. Main


Monte Carlo模拟的精髓: 足够多的random simu平均来逼近真实值: 

```
for (int i=0; i<num_sims; i++) {
    double gauss_bm = gaussian_box_muller();
    S_cur = S_adjust * exp(sqrt(v*v*T)*gauss_bm);
    payoff_sum += std::max(K - S_cur, 0.0);
  }

  return (payoff_sum / static_cast<double>(num_sims)) * exp(-r*T);
```

两个大的file类别: payoff.h && payoff.cpp;  asian.h && asian.cpp:  继承关系相关的各种都是体现在header file中的，cpp中只是具体啊实现了function的implementation，
i.e. payoff.h中定义了PayOffCall和PayOffPut,在cpp中实现具体的方法; 
     asian.h中定义了AsianOption这个abstract base class和这个class中的pure virtual function && 
     		   class AsianOptionArithmetic : public AsianOption { };
		   class AsianOptionGeometric : public AsianOption { };
asian.cpp 中只是具体实现了不同方式计算出来的pay_off_price的具体的implementation
